{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","onFilterChange","filter","onChange","value","PersonForm","onNameChange","onNumberChange","onAddPerson","newName","newNumber","type","onClick","Person","person","onRemovePerson","name","number","Persons","persons","length","p","toUpperCase","includes","map","key","Notification","props","console","log","notification","className","isError","text","baseUrl","axios","get","then","response","data","newObject","post","id","put","object","delete","App","useEffect","PersonService","setPersons","useState","setNewName","setNewNumber","setFilter","setNotification","writeNotification","setTimeout","writeError","error","event","target","preventDefault","personToUpdate","find","undefined","window","confirm","catch","newPerson","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14f90985.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Filter = ({onFilterChange, filter}) => {\r\n\r\n      \r\n    return (\r\n\r\n        <div>\r\n            filter persons with name like <input onChange={onFilterChange} value={filter} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Filter","import React from 'react'\r\n\r\n\r\nconst PersonForm = ({onNameChange, onNumberChange, onAddPerson, newName, newNumber}) => {\r\n\r\n    return (\r\n        <form>\r\n            <div>\r\n                name: <input onChange={onNameChange} value={newName} />\r\n            </div>\r\n            <div>\r\n                number: <input onChange={onNumberChange} value={newNumber} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\" onClick={onAddPerson}>add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Person = ({ person, onRemovePerson }) => {\r\n\r\n    return (\r\n        <div>{person.name} {person.number}\r\n            <button onClick={() => { onRemovePerson(person) }}>delete</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\n\r\nconst Persons = ({filter, persons, onRemovePerson}) => {\r\n\r\n    const renderPersons = () => {\r\n        const personsToRender = filter.length > 0 ?\r\n            persons.filter(p => p.name.toUpperCase().includes(filter.toUpperCase())) :\r\n            persons\r\n    \r\n        // return personsToRender.map(person => <div key={person.name}>{person.name} {person.number}</div>)\r\n        return personsToRender.map(person => <Person key={person.name} person={person} onRemovePerson={onRemovePerson}/>)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {renderPersons()}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Persons","import React from 'react'\r\nimport './Notification.css'\r\n\r\nconst Notification = (props) => {\r\n\r\nconsole.log(props)\r\n\r\n\r\n    if (props.notification === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={props.notification.isError ? 'error' : 'notif'}>\r\n        {/* <div className='notif'> */}\r\n            {props.notification.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n        .then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n        .then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n        .then(response => response.data)\r\n}\r\n\r\nconst remove = object => {\r\n    return axios.delete(`${baseUrl}/${object.id}`, object)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            // return response.data\r\n        })\r\n}\r\n\r\n// export default {\r\n//     getAll: getAll,\r\n//     create: create, \r\n//     update: update \r\n// }\r\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport PersonService from './services/persons'\n\n\nconst App = () => {\n\n  //useEffect makes the code run only once after rendering\n  //otherwise the following code would lead to an infinite loop\n  //as the setPersons functiond re-renders the page and causes the code to run again\n  useEffect(() => {\n    console.log('start effect')\n    PersonService.getAll()\n      .then(persons => {\n        console.log('promise fulfilled')\n        setPersons(persons)\n      })\n  }, [])\n\n\n  console.log('set states')\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n\n  const handleNameChange = (event) => {\n    // console.log('handleNameChange ', event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    // console.log('handleNumberChange ', event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    // console.log('handleFilterChange ', event.target.value)\n    setFilter(event.target.value)\n  }\n\n  const handleAddPerson = (event) => {\n    event.preventDefault()\n\n    console.log('handleAddPerson ', newName, newNumber, persons)\n\n    const personToUpdate = persons.find(p => p.name === newName)\n\n    if (personToUpdate !== undefined) {\n      // alert(`${newName} is already added to phonebook`)\n      if (window.confirm(`${personToUpdate.name} already exists in the phonebook. Replace the number?`)) {\n        personToUpdate.number = newNumber\n        PersonService.update(personToUpdate.id, personToUpdate)\n          .then(p => {\n            //add the person that was created and returned by the server, this object includes the id property\n            setPersons(persons.map(p => p.id === personToUpdate.id ? personToUpdate : p))\n            writeNotification(`${personToUpdate.name} updated`)\n          })\n          .catch(error => {\n            writeError(`${personToUpdate.name} could not be updated as it doesnt exist on the server`)\n          })\n        setNewName('')\n        setNewNumber('')\n      }\n    }\n    else {\n      const newPerson = { name: newName, number: newNumber }\n      //No effect here as this code only gets executed when specific events triggers\n      PersonService.create(newPerson)\n        .then(p => {\n          //add the person that was created and returned by the server, this object includes the id property\n          setPersons(persons.concat([p]))\n          writeNotification(`${newPerson.name} added`)\n        })\n      setNewName('')\n      setNewNumber('')\n    }\n  }\n\n  const handleRemovePerson = (person) => {\n    console.log('handleRemovePerson ', person)\n    if (window.confirm(`Are you sure you want to delete ${person.name}?`)) {\n      PersonService.remove(person)\n        .then(() => {\n          console.log('Removed person ', person)\n          setPersons(persons.filter(p => p.id !== person.id))\n\n          writeNotification(`${person.name} removed`)\n        })\n        .catch(error => {\n          writeError(`${person.name} could not be removed as it doesnt exist on the server`)\n        })\n    }\n  }\n\n  const writeNotification = (notification) => {\n    setNotification({ text: notification, isError: false })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const writeError = (error) => {\n    setNotification({ text: error, isError: true })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  console.log('return')\n\n  return (\n    <div>\n\n      <Notification notification={notification} />\n\n      <h2>Phonebook</h2>\n      <Filter onFilterChange={handleFilterChange} filter={filter} />\n\n      <h3>add a new</h3>\n      <PersonForm\n        onNameChange={handleNameChange} onNumberChange={handleNumberChange} onAddPerson={handleAddPerson}\n        newName={newName} newNumber={newNumber} />\n\n      <h3>Numbers</h3>\n      <Persons filter={filter} persons={persons} onRemovePerson={handleRemovePerson} />\n\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}